import java.text.SimpleDateFormat

apply plugin: "com.android.application"

configurations { natives }

def static buildTime() {
    def df = new SimpleDateFormat("yyyyMMdd")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

dependencies {

    implementation project(path: ':CB_Utils', transitive: false)
    implementation project(path: ':mapsforge', transitive: false)
    implementation project(path: ':CB_UI_Base', transitive: false)
    implementation project(path: ':CB_Locator_Base', transitive: false)
    implementation project(path: ':CB_Core', transitive: false)
    implementation(project(path: ':CB_UI')) {
        exclude group: 'com.github.tony19'
    }

    implementation fileTree(dir: '../libs', include: ['sjxp-2.2.jar'])
    implementation fileTree(dir: '../libs', include: ['logback-android-1.1.1-3.jar'])
    // https://mvnrepository.com/artifact/com.caverock/androidsvg)
    implementation(group: 'com.caverock', name: 'androidsvg', version: '1.4')
    // https://mvnrepository.com/artifact/net.sf.kxml/kxml2
    implementation group: 'net.sf.kxml', name: 'kxml2', version: '2.3.0'

    //libgdx
    implementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
    implementation 'androidx.activity:activity:1.5.1'
    // natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"
    implementation "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    // natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86_64"


//    // https://mvnrepository.com/artifact/com.github.tony19/logback-android-core
//    implementation group: 'com.github.tony19', name: 'logback-android-core', version: '1.1.1-6'

    implementation 'org.jetbrains:annotations:23.0.0'
    implementation 'androidx.core:core:1.8.0'
}


android {
    compileSdkVersion 32
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }

    }
    packagingOptions {
        resources {
            excludes += ['META-INF/robovm/ios/robovm.xml']
        }
    }

    defaultConfig {
        applicationId "de.droidcachebox"
        minSdkVersion 19
        targetSdkVersion 32
        // versionCode = Integer.decode(buildTime())
        // versionName = buildTime()
        setVersionCode(20220827)
        setVersionName("20220827REL")
        multiDexEnabled true
    }

    buildToolsVersion '31.0.0'

}


// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives {
    doFirst {
        file("libs/armeabi/").mkdirs()
        file("libs/armeabi-v7a/").mkdirs()
        file("libs/arm64-v8a/").mkdirs()
        file("libs/x86_64/").mkdirs()
        file("libs/x86/").mkdirs()

        configurations.natives.files.each { jar ->
            def outputDir = null
            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
            if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
            if (jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
            if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
            if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
            if (outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}

tasks.whenTaskAdded { packageTask ->
    if (packageTask.name.contains("package")) {
        packageTask.dependsOn 'copyAndroidNatives'
    }
}

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'de.droidcachebox/de.droidcachebox.AndroidLauncher'
}


