import java.text.SimpleDateFormat

apply plugin: "java"

sourceCompatibility = 1.8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

sourceSets.main.java.srcDirs = [ "src/" ]

dependencies {
    // submoduls
    implementation project(":CB_Utils")
    implementation project(':mapsforge')
    implementation project(":CB_UI_Base")
    implementation project(":CB_Locator_Base")
    implementation project(":CB_Core")

    //libgdx
    implementation "com.badlogicgames.gdx:gdx:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"

    //slf4j
    implementation "org.slf4j:slf4j-api:1.7.25"
    implementation group: 'com.github.tony19', name: 'logback-android-classic', version: '1.1.1-3'

    implementation fileTree(dir: '../libs', include: ['sjxp-2.2.jar'])


    // https://mvnrepository.com/artifact/org.json/json
    implementation group: 'org.json', name: 'json', version: '20180813'


}

eclipse.project {
    name = appName + "-core"
}

task saveBuildInfo {
    doFirst {
        // get the current commit hash in git
        def git_version = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'log', '-1', '--format=%h'
            standardOutput = git_version
        }
        git_version = git_version.toString().trim()

        def git_revison = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', '--all', '--count'
            standardOutput = git_revison
        }
        git_revison = git_revison.toString().trim()
        git_revison = (Integer.decode(git_revison) + 291).toString()
        
        // get the current git branch, if any
        def git_branch = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'symbolic-ref', '--short', '-q', 'HEAD'
            standardOutput = git_branch
            // ignore error output as we might not be on a branch
            ignoreExitValue = true
        }

        // get the current git branch, if any
        def git_ver_tag = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--abbrev=0', '--match', 'V*'
            standardOutput = git_ver_tag
            // ignore error output as we might not be on a branch
            ignoreExitValue = true
        }

        // if we are not on a branch, try to get a tag for the commit
        def git_branch_or_tag
        if (git_branch.size() > 0) {
            git_branch_or_tag = git_branch.toString().trim()
        } else {
            def git_tag = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'describe', '--tags', '--exact-match'
                standardOutput = git_tag
                // ignore error output
                errorOutput = new ByteArrayOutputStream()
                ignoreExitValue = true
            }

            git_branch_or_tag = git_tag.toString().trim()
        }

        def df = new SimpleDateFormat("yyyy-MM-dd")
        // df.setTimeZone(TimeZone.getTimeZone("UTC"))
        def build_time = df.format(new Date())

        // save the combined build info into assets/build.info file
        def result_line = git_ver_tag.toString().trim() + "#" + git_revison + "#" + git_branch_or_tag + "#" + git_version + "#" +
                build_time
        def assetsDir = "$projectDir/../Android_GUI/assets"
        def buildInfoFile = new File(assetsDir, 'build.info').getAbsolutePath()
        new File(buildInfoFile).write(result_line)
        def desktopDir = "$projectDir/../WorkingDir"
        def bf = new File(desktopDir, 'build.info').getAbsolutePath()
        new File(bf).write(result_line)
    }
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn saveBuildInfo
}
